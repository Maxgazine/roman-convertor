old version
function checkCashRegister(price, cash, cid) {
  let checkDrawer = cid;
  let refunding = cash - price;
  let changeTotal = refunding;
  let funding = [];
  let numCollect = [0,0,0,0,0,0,0,0,0]
  while(changeTotal>0){
    if(changeTotal >= 100){
      funding.unshift(cid[8][0]);
      numCollect[8] += 100;
      changeTotal -= 100;
    } else if(changeTotal >= 20){
      funding.unshift(cid[7][0]);
      numCollect[7] += 20;
      changeTotal -= 20;
    } else if(changeTotal >= 10){
      funding.unshift(cid[6][0]);
      numCollect[6] += 10;
      changeTotal -= 10;
    } else if(changeTotal >= 5){
      funding.unshift(cid[5][0]);
      numCollect[5] += 5;
      changeTotal -= 5;
    } else if(changeTotal >= 1){
      funding.unshift(cid[4][0]);
      numCollect[4] += 1;
      changeTotal -= 1;
    } else if(changeTotal >= 0.25){
      funding.unshift(cid[3][0]);
      numCollect[3] += 0.25;
      changeTotal -= 0.25;
    } else if(changeTotal >= 0.1){
      funding.unshift(cid[2][0]);
      numCollect[2] += 0.01;
      changeTotal -= 0.1;
    } else if(changeTotal >= 0.05){
      funding.unshift(cid[1][0]);
      numCollect[1] += 0.05;
      changeTotal -= 0.05;
    } else if(changeTotal >= 0.01){
      funding.unshift(cid[0][0]);
      numCollect[0] += 0.01;
      changeTotal -= 0.01;
    }
    else {break}
  }
  function arrayRemove(arr) { 
    return arr.filter(ele => ele != 0);
  }    
var deduce = arrayRemove(numCollect);

  function convertTo(a,b){
    let result = []
    
    for(let i = 0; i<a.length; i++){
      if(!result.includes(a[i])){
        result.push(a[i]);
      }
    }
    return result + " " + numCollect + " ";
  }
  convertTo(funding,refunding)
  let change = Array.from(cid[0]);
  return change + " a " + deduce + " ax " + convertTo(funding,refunding) + " " + refunding + " b " + funding + " " + checkDrawer;
}

checkCashRegister(19.5, 20, [["PENNY", 1.01], ["NICKEL", 2.05], ["DIME", 3.1], ["QUARTER", 4.25], ["ONE", 90], ["FIVE", 55], ["TEN", 20], ["TWENTY", 60], ["ONE HUNDRED", 100]]);
console.log(checkCashRegister(19.5, 20, [["PENNY", 1.01], ["NICKEL", 2.05], ["DIME", 3.1], ["QUARTER", 4.25], ["ONE", 90], ["FIVE", 55], ["TEN", 20], ["TWENTY", 60], ["ONE HUNDRED", 100]]));
console.log(" ")
console.log(checkCashRegister(3.26, 100, [["PENNY", 1.01], ["NICKEL", 2.05], ["DIME", 3.1], ["QUARTER", 4.25], ["ONE", 90], ["FIVE", 55], ["TEN", 20], ["TWENTY", 60], ["ONE HUNDRED", 100]]));
console.log(" ")
console.log(checkCashRegister(19.5, 20, [["PENNY", 0.01], ["NICKEL", 0], ["DIME", 0], ["QUARTER", 0], ["ONE", 1], ["FIVE", 0], ["TEN", 0], ["TWENTY", 0], ["ONE HUNDRED", 0]]));
console.log(" ")
console.log(checkCashRegister(19.5, 20, [["PENNY", 0.5], ["NICKEL", 0], ["DIME", 0], ["QUARTER", 0], ["ONE", 0], ["FIVE", 0], ["TEN", 0], ["TWENTY", 0], ["ONE HUNDRED", 0]]));


new Version
function checkCashRegister(price, cash, cid) {
  var change = cash - price; //change due
  let totalCash = 0; //variable to hold total cash in register
  let cidReverse = [...cid].reverse(); 
  let temp = []; //temp arr to hold each chnage from currency unit
  let cashValue = {  //object to show base currency unit values
    "PENNY": 0.01, 
    "NICKEL": 0.05, 
    "DIME": 0.1, 
    "QUARTER": 0.25, 
    "ONE": 1, 
    "FIVE": 5, 
    "TEN": 10, 
    "TWENTY": 20, 
    "ONE HUNDRED": 100
    }
    
  let changeDue = {  //object with status & change to be returned  
    status: '',
    change: []
  }
  
  cid.forEach(element => {  //get total cash in register
    totalCash += element[1];
  });
  totalCash = parseFloat(totalCash.toFixed(2)) //2 decimal places

  //function to check if currency unit can offset some change
  function cashUnit(unit, index) { //unit param-> reference cashValue obj and index param-> reference cid unit amount
    let unitTotal = cidReverse[index][1]; //get currency unit total from cid
    let amount = Math.floor(change / cashValue[unit]) * cashValue[unit]; //check max possible amount that can be offset from change
    if (unitTotal > 0) { //check if some change can be paid from this unit
      if (unitTotal >= amount) { //indicates there's enough unitTotal to offset max possible amount 
        change -= amount; //subtract amount taken from change
        change = parseFloat(change.toFixed(2));
        return amount; //amount taken from this unit
      }
      else {  //Not enough unitTotal, hence use all 
        change -= unitTotal; //subtract unitTotal from change since all unitTotal was used
        change = parseFloat(change.toFixed(2));
        return unitTotal; //amount taken from this unit which == full unitTotal
      }
    }
    else { //No change can be taken from this unit
      return 0;
    }
  }

  //function to implement cashUnit() for each unit
  
  function getChange() {
    let changeOwed = cash - price; //full amount of change due
    for (let [index, value] of cidReverse.entries())  {
      let changeGotten = cashUnit(value[0], index);
      if (changeGotten > 0) { //add change amount gotten per unit
        temp.push([value[0], changeGotten]);
      }
      if (change === 0) {break;} //terminate if change has been derived
    }
    if (totalCash < changeOwed || change !== 0) {
        changeDue.status = "INSUFFICIENT_FUNDS";
    }
    else if (totalCash == changeOwed) {
        changeDue.status = "CLOSED";
        changeDue.change = [...cid];
    }
    else {
      changeDue.status = "OPEN";
      changeDue.change = [...temp];
    }
  }
  
  getChange(); 
  return changeDue;
}
